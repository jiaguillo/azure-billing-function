/*
 * Enterprise Reporting APIs (preview)
 * The Reporting APIs enable Enterprise Azure customers to programmatically pull consumption and billing data into preferred data analysis tools. Generate API Key on Enterprise portal and follow the tutorial under Help - Reporting APIs. The first section under this help article explains how to generate\\retrieve the API key for the specified enrollment. <a href=\"https://docs.microsoft.com/en-us/azure/billing/billing-enterprise-api\" data-linktype=\"external\">Billing Enterprise API official documentation</a>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.BillingPeriodV1;

public class BillingPeriodsApi {
    private ApiClient apiClient;

    public BillingPeriodsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingPeriodsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for billingPeriodsV1Get
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call billingPeriodsV1GetCall(String authorization, String enrollmentNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/enrollments/{enrollmentNumber}/billingperiods"
            .replaceAll("\\{" + "enrollmentNumber" + "\\}", apiClient.escapeString(enrollmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call billingPeriodsV1GetValidateBeforeCall(String authorization, String enrollmentNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling billingPeriodsV1Get(Async)");
        }
        
        // verify the required parameter 'enrollmentNumber' is set
        if (enrollmentNumber == null) {
            throw new ApiException("Missing the required parameter 'enrollmentNumber' when calling billingPeriodsV1Get(Async)");
        }
        
        
        com.squareup.okhttp.Call call = billingPeriodsV1GetCall(authorization, enrollmentNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets biling periods
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number (required)
     * @return List&lt;BillingPeriodV1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BillingPeriodV1> billingPeriodsV1Get(String authorization, String enrollmentNumber) throws ApiException {
        ApiResponse<List<BillingPeriodV1>> resp = billingPeriodsV1GetWithHttpInfo(authorization, enrollmentNumber);
        return resp.getData();
    }

    /**
     * Gets biling periods
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number (required)
     * @return ApiResponse&lt;List&lt;BillingPeriodV1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BillingPeriodV1>> billingPeriodsV1GetWithHttpInfo(String authorization, String enrollmentNumber) throws ApiException {
        com.squareup.okhttp.Call call = billingPeriodsV1GetValidateBeforeCall(authorization, enrollmentNumber, null, null);
        Type localVarReturnType = new TypeToken<List<BillingPeriodV1>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets biling periods (asynchronously)
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call billingPeriodsV1GetAsync(String authorization, String enrollmentNumber, final ApiCallback<List<BillingPeriodV1>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = billingPeriodsV1GetValidateBeforeCall(authorization, enrollmentNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BillingPeriodV1>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
