/*
 * Enterprise Reporting APIs (preview)
 * The Reporting APIs enable Enterprise Azure customers to programmatically pull consumption and billing data into preferred data analysis tools. Generate API Key on Enterprise portal and follow the tutorial under Help - Reporting APIs. The first section under this help article explains how to generate\\retrieve the API key for the specified enrollment. <a href=\"https://docs.microsoft.com/en-us/azure/billing/billing-enterprise-api\" data-linktype=\"external\">Billing Enterprise API official documentation</a>
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.DateTime;

import com.google.gson.reflect.TypeToken;
import com.squareup.okhttp.HttpUrl;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;
import io.swagger.client.model.PagedJsonData;

public class UsageDetailsApi {
    private ApiClient apiClient;

    public UsageDetailsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsageDetailsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for usageDetailsGet
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param startTime The start time (required)
     * @param endTime The end time (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetCall(String authorization, String enrollmentNumber, DateTime startTime, DateTime endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/enrollments/{enrollmentNumber}/usagedetailsbycustomdate"
            .replaceAll("\\{" + "enrollmentNumber" + "\\}", apiClient.escapeString(enrollmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usageDetailsGetValidateBeforeCall(String authorization, String enrollmentNumber, DateTime startTime, DateTime endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling usageDetailsGet(Async)");
        }
        
        // verify the required parameter 'enrollmentNumber' is set
        if (enrollmentNumber == null) {
            throw new ApiException("Missing the required parameter 'enrollmentNumber' when calling usageDetailsGet(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new ApiException("Missing the required parameter 'startTime' when calling usageDetailsGet(Async)");
        }
        
        // verify the required parameter 'endTime' is set
        if (endTime == null) {
            throw new ApiException("Missing the required parameter 'endTime' when calling usageDetailsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = usageDetailsGetCall(authorization, enrollmentNumber, startTime, endTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the usage details by custom date range
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param startTime The start time (required)
     * @param endTime The end time (required)
     * @return PagedJsonData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedJsonData usageDetailsGet(String authorization, String enrollmentNumber, DateTime startTime, DateTime endTime) throws ApiException {
        ApiResponse<PagedJsonData> resp = usageDetailsGetWithHttpInfo(authorization, enrollmentNumber, startTime, endTime);
        return resp.getData();
    }

    /**
     * Gets the usage details by custom date range
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param startTime The start time (required)
     * @param endTime The end time (required)
     * @return ApiResponse&lt;PagedJsonData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedJsonData> usageDetailsGetWithHttpInfo(String authorization, String enrollmentNumber, DateTime startTime, DateTime endTime) throws ApiException {
        com.squareup.okhttp.Call call = usageDetailsGetValidateBeforeCall(authorization, enrollmentNumber, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the usage details by custom date range (asynchronously)
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param startTime The start time (required)
     * @param endTime The end time (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetAsync(String authorization, String enrollmentNumber, DateTime startTime, DateTime endTime, final ApiCallback<PagedJsonData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usageDetailsGetValidateBeforeCall(authorization, enrollmentNumber, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usageDetailsGetByBillingPeriod
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param billingPeriod The billing period. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetByBillingPeriodCall(String authorization, String enrollmentNumber, String billingPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, final HttpUrl nextUrl) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = ("/v1/enrollments/{enrollmentNumber}"+ (nextUrl == null ? "/billingPeriods/{billingPeriod}" : "") + "/usagedetails" + (nextUrl != null ? "/nextpage" : ""))
            .replaceAll("\\{" + "enrollmentNumber" + "\\}", apiClient.escapeString(enrollmentNumber.toString()))
            .replaceAll("\\{" + "billingPeriod" + "\\}", apiClient.escapeString(billingPeriod.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        
        if(nextUrl != null) {
        	for(int i=0; i < nextUrl.querySize(); i++) {
        		localVarQueryParams.add(new Pair(nextUrl.queryParameterName(i), nextUrl.queryParameterValue(i)));
        	}
        }
        

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usageDetailsGetByBillingPeriodValidateBeforeCall(String authorization, String enrollmentNumber, String billingPeriod, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, HttpUrl nextUrl) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling usageDetailsGetByBillingPeriod(Async)");
        }
        
        // verify the required parameter 'enrollmentNumber' is set
        if (enrollmentNumber == null) {
            throw new ApiException("Missing the required parameter 'enrollmentNumber' when calling usageDetailsGetByBillingPeriod(Async)");
        }
        
        // verify the required parameter 'billingPeriod' is set
        if (billingPeriod == null) {
            throw new ApiException("Missing the required parameter 'billingPeriod' when calling usageDetailsGetByBillingPeriod(Async)");
        }
        
        
        com.squareup.okhttp.Call call = usageDetailsGetByBillingPeriodCall(authorization, enrollmentNumber, billingPeriod, progressListener, progressRequestListener, nextUrl);
        return call;

        
        
        
        
    }

    /**
     * Gets the usage details by billing period.
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param billingPeriod The billing period. (required)
     * @return PagedJsonData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedJsonData usageDetailsGetByBillingPeriod(String authorization, String enrollmentNumber, String billingPeriod, HttpUrl nextUrl) throws ApiException {
        ApiResponse<PagedJsonData> resp = usageDetailsGetByBillingPeriodWithHttpInfo(authorization, enrollmentNumber, billingPeriod, nextUrl);
        return resp.getData();
    }

    /**
     * Gets the usage details by billing period.
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param billingPeriod The billing period. (required)
     * @return ApiResponse&lt;PagedJsonData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedJsonData> usageDetailsGetByBillingPeriodWithHttpInfo(String authorization, String enrollmentNumber, String billingPeriod, HttpUrl nextUrl) throws ApiException {
        com.squareup.okhttp.Call call = usageDetailsGetByBillingPeriodValidateBeforeCall(authorization, enrollmentNumber, billingPeriod, null, null, nextUrl);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the usage details by billing period. (asynchronously)
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param billingPeriod The billing period. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetByBillingPeriodAsync(String authorization, String enrollmentNumber, String billingPeriod, final ApiCallback<PagedJsonData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usageDetailsGetByBillingPeriodValidateBeforeCall(authorization, enrollmentNumber, billingPeriod, progressListener, progressRequestListener, null);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usageDetailsGetByCurrentBillingPeriod
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetByCurrentBillingPeriodCall(String authorization, String enrollmentNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/enrollments/{enrollmentNumber}/usagedetails"
            .replaceAll("\\{" + "enrollmentNumber" + "\\}", apiClient.escapeString(enrollmentNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usageDetailsGetByCurrentBillingPeriodValidateBeforeCall(String authorization, String enrollmentNumber, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling usageDetailsGetByCurrentBillingPeriod(Async)");
        }
        
        // verify the required parameter 'enrollmentNumber' is set
        if (enrollmentNumber == null) {
            throw new ApiException("Missing the required parameter 'enrollmentNumber' when calling usageDetailsGetByCurrentBillingPeriod(Async)");
        }
        
        
        com.squareup.okhttp.Call call = usageDetailsGetByCurrentBillingPeriodCall(authorization, enrollmentNumber, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the usage details by current billing period.
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @return PagedJsonData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedJsonData usageDetailsGetByCurrentBillingPeriod(String authorization, String enrollmentNumber) throws ApiException {
        ApiResponse<PagedJsonData> resp = usageDetailsGetByCurrentBillingPeriodWithHttpInfo(authorization, enrollmentNumber);
        return resp.getData();
    }

    /**
     * Gets the usage details by current billing period.
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @return ApiResponse&lt;PagedJsonData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedJsonData> usageDetailsGetByCurrentBillingPeriodWithHttpInfo(String authorization, String enrollmentNumber) throws ApiException {
        com.squareup.okhttp.Call call = usageDetailsGetByCurrentBillingPeriodValidateBeforeCall(authorization, enrollmentNumber, null, null);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the usage details by current billing period. (asynchronously)
     * 
     * @param authorization Specify the value in this format: \&quot;bearer {API_KEY}\&quot; (required)
     * @param enrollmentNumber The enrollment number. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usageDetailsGetByCurrentBillingPeriodAsync(String authorization, String enrollmentNumber, final ApiCallback<PagedJsonData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usageDetailsGetByCurrentBillingPeriodValidateBeforeCall(authorization, enrollmentNumber, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedJsonData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
